{"version":3,"sources":["components/VideoJS/index.module.scss","components/VideoJS/index.jsx","App.js","index.js"],"names":["module","exports","VideoJS","options","onReady","videoRef","useRef","playerRef","useEffect","current","videoElement","player","videojs","console","log","dispose","className","styles","video","ref","App","React","autoplay","controls","responsive","fluid","sources","src","type","on","ReactDOM","render","document","getElementById"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,MAAQ,yB,iLC4CXC,EAvCQ,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC3BC,EAAWC,iBAAO,MAClBC,EAAYD,iBAAO,MA8BzB,OA5BAE,qBAAU,WAER,IAAKD,EAAUE,QAAS,CACtB,IAAMC,EAAeL,EAASI,QAC9B,IAAKC,EAAc,OAEnB,IAAMC,EAAUJ,EAAUE,QAAUG,YAAQF,EAAcP,GAAS,WACjEU,QAAQC,IAAI,mBACZV,GAAWA,EAAQO,SAQtB,CAACR,IAGJK,qBAAU,WACR,OAAO,WACDD,EAAUE,UACZF,EAAUE,QAAQM,UAClBR,EAAUE,QAAU,SAGvB,IAGD,qBAAKO,UAAWC,IAAOC,MAAvB,SACE,uBAAOC,IAAKd,EAAUW,UAAU,sCCavBI,G,MA/CH,WACV,IAAMb,EAAYc,IAAMf,OAAO,MAuC/B,OACE,mCACE,cAAC,EAAD,CAASH,QAvCU,CAErBmB,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,OAAO,EACPC,QAAS,CACP,CACEC,IAAK,iFACLC,KAAM,2BA8B0BxB,QAzBZ,SAACO,GACzBJ,EAAUE,QAAUE,EAGpBA,EAAOkB,GAAG,WAAW,WACnBhB,QAAQC,IAAI,wBAGdH,EAAOkB,GAAG,WAAW,WACnBhB,QAAQC,IAAI,iC,MC1BlBgB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.48bbaaf4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"video\":\"VideoJS_video__3sind\"};","import React, { useEffect, useRef } from \"react\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\n\nimport styles from \"./index.module.scss\";\n\nexport const VideoJS = ({ options, onReady }) => {\n  const videoRef = useRef(null);\n  const playerRef = useRef(null);\n\n  useEffect(() => {\n    // make sure Video.js player is only initialized once\n    if (!playerRef.current) {\n      const videoElement = videoRef.current;\n      if (!videoElement) return;\n\n      const player = (playerRef.current = videojs(videoElement, options, () => {\n        console.log(\"player is ready\");\n        onReady && onReady(player);\n      }));\n    } else {\n      // you can update player here [update player through props]\n      // const player = playerRef.current;\n      // player.autoplay(options.autoplay);\n      // player.src(options.sources);\n    }\n  }, [options]);\n\n  // Dispose the Video.js player when the functional component unmounts\n  useEffect(() => {\n    return () => {\n      if (playerRef.current) {\n        playerRef.current.dispose();\n        playerRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div className={styles.video}>\n      <video ref={videoRef} className=\"video-js vjs-big-play-centered\" />\n    </div>\n  );\n};\n\nexport default VideoJS;\n","import React from \"react\";\n\nimport VideoJS from \"./components/VideoJS\"; // point to where the functional component is stored\n\nimport styles from \"./app.module.scss\";\n\nconst App = () => {\n  const playerRef = React.useRef(null);\n\n  const videoJsOptions = {\n    // lookup the options in the docs for more options\n    autoplay: true,\n    controls: true,\n    responsive: true,\n    fluid: true,\n    sources: [\n      {\n        src: \"https://d2zihajmogu5jn.cloudfront.net/bipbop-advanced/bipbop_16x9_variant.m3u8\",\n        type: \"application/x-mpegURL\",\n      },\n    ],\n  };\n\n  const handlePlayerReady = (player) => {\n    playerRef.current = player;\n\n    // you can handle player events here\n    player.on(\"waiting\", () => {\n      console.log(\"player is waiting\");\n    });\n\n    player.on(\"dispose\", () => {\n      console.log(\"player will dispose\");\n    });\n  };\n\n  // const changePlayerOptions = () => {\n  //   // you can update the player through the Video.js player instance\n  //   if (!playerRef.current) {\n  //     return;\n  //   }\n  //   // [update player through instance's api]\n  //   playerRef.current.src([{src: 'http://ex.com/video.mp4', type: 'video/mp4'}]);\n  //   playerRef.current.autoplay(false);\n  // };\n\n  return (\n    <>\n      <VideoJS options={videoJsOptions} onReady={handlePlayerReady} />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}